// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: server.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExpenseType int32

const (
	ExpenseType_EMPTY     ExpenseType = 0
	ExpenseType_GARAGE    ExpenseType = 1
	ExpenseType_TOOLS     ExpenseType = 2
	ExpenseType_TAX       ExpenseType = 3
	ExpenseType_INSURANCE ExpenseType = 4
	ExpenseType_ROAD      ExpenseType = 5
	ExpenseType_WASHING   ExpenseType = 6
	ExpenseType_PARKING   ExpenseType = 7
	ExpenseType_OTHER     ExpenseType = 99
)

// Enum value maps for ExpenseType.
var (
	ExpenseType_name = map[int32]string{
		0:  "EMPTY",
		1:  "GARAGE",
		2:  "TOOLS",
		3:  "TAX",
		4:  "INSURANCE",
		5:  "ROAD",
		6:  "WASHING",
		7:  "PARKING",
		99: "OTHER",
	}
	ExpenseType_value = map[string]int32{
		"EMPTY":     0,
		"GARAGE":    1,
		"TOOLS":     2,
		"TAX":       3,
		"INSURANCE": 4,
		"ROAD":      5,
		"WASHING":   6,
		"PARKING":   7,
		"OTHER":     99,
	}
)

func (x ExpenseType) Enum() *ExpenseType {
	p := new(ExpenseType)
	*p = x
	return p
}

func (x ExpenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (ExpenseType) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x ExpenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpenseType.Descriptor instead.
func (ExpenseType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type Cost struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// integer value, decimal(8, 2) in MySQL
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// currency code, for example RUB
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cost) Reset() {
	*x = Cost{}
	mi := &file_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *Cost) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Cost) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Car struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Vin           string                 `protobuf:"bytes,3,opt,name=vin,proto3" json:"vin,omitempty"`
	Year          int32                  `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
	Default       bool                   `protobuf:"varint,5,opt,name=default,proto3" json:"default,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Car) Reset() {
	*x = Car{}
	mi := &file_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *Car) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Car) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Car) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *Car) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Car) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Car) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CarCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cars          []*Car                 `protobuf:"bytes,1,rep,name=cars,proto3" json:"cars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CarCollection) Reset() {
	*x = CarCollection{}
	mi := &file_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarCollection) ProtoMessage() {}

func (x *CarCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarCollection.ProtoReflect.Descriptor instead.
func (*CarCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *CarCollection) GetCars() []*Car {
	if x != nil {
		return x.Cars
	}
	return nil
}

type FillingStation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillingStation) Reset() {
	*x = FillingStation{}
	mi := &file_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillingStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillingStation) ProtoMessage() {}

func (x *FillingStation) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillingStation.ProtoReflect.Descriptor instead.
func (*FillingStation) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *FillingStation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FillingStation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FillingStation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type FillingStationCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stations      []*FillingStation      `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillingStationCollection) Reset() {
	*x = FillingStationCollection{}
	mi := &file_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillingStationCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillingStationCollection) ProtoMessage() {}

func (x *FillingStationCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillingStationCollection.ProtoReflect.Descriptor instead.
func (*FillingStationCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *FillingStationCollection) GetStations() []*FillingStation {
	if x != nil {
		return x.Stations
	}
	return nil
}

type FuelType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuelType) Reset() {
	*x = FuelType{}
	mi := &file_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelType) ProtoMessage() {}

func (x *FuelType) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelType.ProtoReflect.Descriptor instead.
func (*FuelType) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *FuelType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FuelType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FuelTypeCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Types         []*FuelType            `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuelTypeCollection) Reset() {
	*x = FuelTypeCollection{}
	mi := &file_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuelTypeCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelTypeCollection) ProtoMessage() {}

func (x *FuelTypeCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelTypeCollection.ProtoReflect.Descriptor instead.
func (*FuelTypeCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *FuelTypeCollection) GetTypes() []*FuelType {
	if x != nil {
		return x.Types
	}
	return nil
}

type Fuel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cost  *Cost                  `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// integer value, decimal(8, 2) in MySQL
	Value         int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Station       *FillingStation        `protobuf:"bytes,4,opt,name=station,proto3" json:"station,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Distance      int32                  `protobuf:"varint,6,opt,name=distance,proto3" json:"distance,omitempty"`
	Car           *Car                   `protobuf:"bytes,7,opt,name=car,proto3" json:"car,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Type          *FuelType              `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fuel) Reset() {
	*x = Fuel{}
	mi := &file_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fuel) ProtoMessage() {}

func (x *Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fuel.ProtoReflect.Descriptor instead.
func (*Fuel) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *Fuel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fuel) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Fuel) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Fuel) GetStation() *FillingStation {
	if x != nil {
		return x.Station
	}
	return nil
}

func (x *Fuel) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Fuel) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Fuel) GetCar() *Car {
	if x != nil {
		return x.Car
	}
	return nil
}

func (x *Fuel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Fuel) GetType() *FuelType {
	if x != nil {
		return x.Type
	}
	return nil
}

type FuelCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fuels         []*Fuel                `protobuf:"bytes,1,rep,name=fuels,proto3" json:"fuels,omitempty"`
	Meta          *PaginationMeta        `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuelCollection) Reset() {
	*x = FuelCollection{}
	mi := &file_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuelCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelCollection) ProtoMessage() {}

func (x *FuelCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelCollection.ProtoReflect.Descriptor instead.
func (*FuelCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *FuelCollection) GetFuels() []*Fuel {
	if x != nil {
		return x.Fuels
	}
	return nil
}

func (x *FuelCollection) GetMeta() *PaginationMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Currency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// currency code, for example RUB
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Default       bool                   `protobuf:"varint,4,opt,name=default,proto3" json:"default,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *Currency) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Currency) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DefaultCurrency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currency      *Currency              `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Found         bool                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultCurrency) Reset() {
	*x = DefaultCurrency{}
	mi := &file_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCurrency) ProtoMessage() {}

func (x *DefaultCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCurrency.ProtoReflect.Descriptor instead.
func (*DefaultCurrency) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *DefaultCurrency) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *DefaultCurrency) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type CurrencyCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currencies    []*Currency            `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyCollection) Reset() {
	*x = CurrencyCollection{}
	mi := &file_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyCollection) ProtoMessage() {}

func (x *CurrencyCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyCollection.ProtoReflect.Descriptor instead.
func (*CurrencyCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *CurrencyCollection) GetCurrencies() []*Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type PaginationMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int32                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Last          int32                  `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginationMeta) Reset() {
	*x = PaginationMeta{}
	mi := &file_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationMeta) ProtoMessage() {}

func (x *PaginationMeta) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationMeta.ProtoReflect.Descriptor instead.
func (*PaginationMeta) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *PaginationMeta) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PaginationMeta) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

type UserSettings struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DefaultCar      *Car                   `protobuf:"bytes,2,opt,name=default_car,json=defaultCar,proto3" json:"default_car,omitempty"`
	DefaultCurrency *Currency              `protobuf:"bytes,3,opt,name=default_currency,json=defaultCurrency,proto3" json:"default_currency,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DefaultFuelType *FuelType              `protobuf:"bytes,6,opt,name=default_fuel_type,json=defaultFuelType,proto3" json:"default_fuel_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserSettings) Reset() {
	*x = UserSettings{}
	mi := &file_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettings) ProtoMessage() {}

func (x *UserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettings.ProtoReflect.Descriptor instead.
func (*UserSettings) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{13}
}

func (x *UserSettings) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserSettings) GetDefaultCar() *Car {
	if x != nil {
		return x.DefaultCar
	}
	return nil
}

func (x *UserSettings) GetDefaultCurrency() *Currency {
	if x != nil {
		return x.DefaultCurrency
	}
	return nil
}

func (x *UserSettings) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserSettings) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserSettings) GetDefaultFuelType() *FuelType {
	if x != nil {
		return x.DefaultFuelType
	}
	return nil
}

type FuelFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FuelFilter) Reset() {
	*x = FuelFilter{}
	mi := &file_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelFilter) ProtoMessage() {}

func (x *FuelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelFilter.ProtoReflect.Descriptor instead.
func (*FuelFilter) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{14}
}

func (x *FuelFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FuelFilter) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type OrderType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderType) Reset() {
	*x = OrderType{}
	mi := &file_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderType) ProtoMessage() {}

func (x *OrderType) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderType.ProtoReflect.Descriptor instead.
func (*OrderType) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{15}
}

func (x *OrderType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OrderTypeCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Types         []*OrderType           `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderTypeCollection) Reset() {
	*x = OrderTypeCollection{}
	mi := &file_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderTypeCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTypeCollection) ProtoMessage() {}

func (x *OrderTypeCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTypeCollection.ProtoReflect.Descriptor instead.
func (*OrderTypeCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{16}
}

func (x *OrderTypeCollection) GetTypes() []*OrderType {
	if x != nil {
		return x.Types
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cost          *Cost                  `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Capacity      string                 `protobuf:"bytes,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	UsedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=used_at,json=usedAt,proto3" json:"used_at,omitempty"`
	Distance      int32                  `protobuf:"varint,7,opt,name=distance,proto3" json:"distance,omitempty"`
	Car           *Car                   `protobuf:"bytes,8,opt,name=car,proto3" json:"car,omitempty"`
	Type          *OrderType             `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{17}
}

func (x *Order) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Order) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Order) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *Order) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Order) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *Order) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Order) GetCar() *Car {
	if x != nil {
		return x.Car
	}
	return nil
}

func (x *Order) GetType() *OrderType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type OrderCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*Order               `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Meta          *PaginationMeta        `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderCollection) Reset() {
	*x = OrderCollection{}
	mi := &file_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCollection) ProtoMessage() {}

func (x *OrderCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCollection.ProtoReflect.Descriptor instead.
func (*OrderCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{18}
}

func (x *OrderCollection) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *OrderCollection) GetMeta() *PaginationMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Expense struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cost          *Cost                  `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Car           *Car                   `protobuf:"bytes,5,opt,name=car,proto3" json:"car,omitempty"`
	Type          ExpenseType            `protobuf:"varint,6,opt,name=type,proto3,enum=xelbot.com.autonotes.server.ExpenseType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expense) Reset() {
	*x = Expense{}
	mi := &file_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expense) ProtoMessage() {}

func (x *Expense) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expense.ProtoReflect.Descriptor instead.
func (*Expense) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{19}
}

func (x *Expense) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Expense) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Expense) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Expense) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Expense) GetCar() *Car {
	if x != nil {
		return x.Car
	}
	return nil
}

func (x *Expense) GetType() ExpenseType {
	if x != nil {
		return x.Type
	}
	return ExpenseType_EMPTY
}

type ExpenseCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expenses      []*Expense             `protobuf:"bytes,1,rep,name=expenses,proto3" json:"expenses,omitempty"`
	Meta          *PaginationMeta        `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpenseCollection) Reset() {
	*x = ExpenseCollection{}
	mi := &file_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpenseCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseCollection) ProtoMessage() {}

func (x *ExpenseCollection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseCollection.ProtoReflect.Descriptor instead.
func (*ExpenseCollection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{20}
}

func (x *ExpenseCollection) GetExpenses() []*Expense {
	if x != nil {
		return x.Expenses
	}
	return nil
}

func (x *ExpenseCollection) GetMeta() *PaginationMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type OrderFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderFilter) Reset() {
	*x = OrderFilter{}
	mi := &file_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFilter) ProtoMessage() {}

func (x *OrderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFilter.ProtoReflect.Descriptor instead.
func (*OrderFilter) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{21}
}

func (x *OrderFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrderFilter) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ExpenseFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpenseFilter) Reset() {
	*x = ExpenseFilter{}
	mi := &file_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpenseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpenseFilter) ProtoMessage() {}

func (x *ExpenseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpenseFilter.ProtoReflect.Descriptor instead.
func (*ExpenseFilter) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{22}
}

func (x *ExpenseFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExpenseFilter) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

var File_server_proto protoreflect.FileDescriptor

const file_server_proto_rawDesc = "" +
	"\n" +
	"\fserver.proto\x12\x1bxelbot.com.autonotes.server\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"8\n" +
	"\x04Cost\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\"\xa4\x01\n" +
	"\x03Car\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03vin\x18\x03 \x01(\tR\x03vin\x12\x12\n" +
	"\x04year\x18\x04 \x01(\x05R\x04year\x12\x18\n" +
	"\adefault\x18\x05 \x01(\bR\adefault\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"E\n" +
	"\rCarCollection\x124\n" +
	"\x04cars\x18\x01 \x03(\v2 .xelbot.com.autonotes.server.CarR\x04cars\"o\n" +
	"\x0eFillingStation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"c\n" +
	"\x18FillingStationCollection\x12G\n" +
	"\bstations\x18\x01 \x03(\v2+.xelbot.com.autonotes.server.FillingStationR\bstations\".\n" +
	"\bFuelType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"Q\n" +
	"\x12FuelTypeCollection\x12;\n" +
	"\x05types\x18\x01 \x03(\v2%.xelbot.com.autonotes.server.FuelTypeR\x05types\"\xa0\x03\n" +
	"\x04Fuel\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x125\n" +
	"\x04cost\x18\x02 \x01(\v2!.xelbot.com.autonotes.server.CostR\x04cost\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x05R\x05value\x12E\n" +
	"\astation\x18\x04 \x01(\v2+.xelbot.com.autonotes.server.FillingStationR\astation\x12.\n" +
	"\x04date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12\x1a\n" +
	"\bdistance\x18\x06 \x01(\x05R\bdistance\x122\n" +
	"\x03car\x18\a \x01(\v2 .xelbot.com.autonotes.server.CarR\x03car\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\x04type\x18\t \x01(\v2%.xelbot.com.autonotes.server.FuelTypeR\x04type\"\x8a\x01\n" +
	"\x0eFuelCollection\x127\n" +
	"\x05fuels\x18\x01 \x03(\v2!.xelbot.com.autonotes.server.FuelR\x05fuels\x12?\n" +
	"\x04meta\x18\x02 \x01(\v2+.xelbot.com.autonotes.server.PaginationMetaR\x04meta\"\x97\x01\n" +
	"\bCurrency\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x03 \x01(\tR\x04code\x12\x18\n" +
	"\adefault\x18\x04 \x01(\bR\adefault\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"j\n" +
	"\x0fDefaultCurrency\x12A\n" +
	"\bcurrency\x18\x01 \x01(\v2%.xelbot.com.autonotes.server.CurrencyR\bcurrency\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\"[\n" +
	"\x12CurrencyCollection\x12E\n" +
	"\n" +
	"currencies\x18\x01 \x03(\v2%.xelbot.com.autonotes.server.CurrencyR\n" +
	"currencies\">\n" +
	"\x0ePaginationMeta\x12\x18\n" +
	"\acurrent\x18\x01 \x01(\x05R\acurrent\x12\x12\n" +
	"\x04last\x18\x02 \x01(\x05R\x04last\"\xfc\x02\n" +
	"\fUserSettings\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12A\n" +
	"\vdefault_car\x18\x02 \x01(\v2 .xelbot.com.autonotes.server.CarR\n" +
	"defaultCar\x12P\n" +
	"\x10default_currency\x18\x03 \x01(\v2%.xelbot.com.autonotes.server.CurrencyR\x0fdefaultCurrency\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12Q\n" +
	"\x11default_fuel_type\x18\x06 \x01(\v2%.xelbot.com.autonotes.server.FuelTypeR\x0fdefaultFuelType\"6\n" +
	"\n" +
	"FuelFilter\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\"/\n" +
	"\tOrderType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"S\n" +
	"\x13OrderTypeCollection\x12<\n" +
	"\x05types\x18\x01 \x03(\v2&.xelbot.com.autonotes.server.OrderTypeR\x05types\"\xb8\x03\n" +
	"\x05Order\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x125\n" +
	"\x04cost\x18\x02 \x01(\v2!.xelbot.com.autonotes.server.CostR\x04cost\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcapacity\x18\x04 \x01(\tR\bcapacity\x12.\n" +
	"\x04date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x123\n" +
	"\aused_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x06usedAt\x12\x1a\n" +
	"\bdistance\x18\a \x01(\x05R\bdistance\x122\n" +
	"\x03car\x18\b \x01(\v2 .xelbot.com.autonotes.server.CarR\x03car\x12:\n" +
	"\x04type\x18\t \x01(\v2&.xelbot.com.autonotes.server.OrderTypeR\x04type\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\x8e\x01\n" +
	"\x0fOrderCollection\x12:\n" +
	"\x06orders\x18\x01 \x03(\v2\".xelbot.com.autonotes.server.OrderR\x06orders\x12?\n" +
	"\x04meta\x18\x02 \x01(\v2+.xelbot.com.autonotes.server.PaginationMetaR\x04meta\"\x94\x02\n" +
	"\aExpense\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x125\n" +
	"\x04cost\x18\x02 \x01(\v2!.xelbot.com.autonotes.server.CostR\x04cost\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12.\n" +
	"\x04date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x122\n" +
	"\x03car\x18\x05 \x01(\v2 .xelbot.com.autonotes.server.CarR\x03car\x12<\n" +
	"\x04type\x18\x06 \x01(\x0e2(.xelbot.com.autonotes.server.ExpenseTypeR\x04type\"\x96\x01\n" +
	"\x11ExpenseCollection\x12@\n" +
	"\bexpenses\x18\x01 \x03(\v2$.xelbot.com.autonotes.server.ExpenseR\bexpenses\x12?\n" +
	"\x04meta\x18\x02 \x01(\v2+.xelbot.com.autonotes.server.PaginationMetaR\x04meta\"7\n" +
	"\vOrderFilter\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\"9\n" +
	"\rExpenseFilter\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page*v\n" +
	"\vExpenseType\x12\t\n" +
	"\x05EMPTY\x10\x00\x12\n" +
	"\n" +
	"\x06GARAGE\x10\x01\x12\t\n" +
	"\x05TOOLS\x10\x02\x12\a\n" +
	"\x03TAX\x10\x03\x12\r\n" +
	"\tINSURANCE\x10\x04\x12\b\n" +
	"\x04ROAD\x10\x05\x12\v\n" +
	"\aWASHING\x10\x06\x12\v\n" +
	"\aPARKING\x10\a\x12\t\n" +
	"\x05OTHER\x10c2\xd5\x03\n" +
	"\x0eUserRepository\x12M\n" +
	"\aGetCars\x12\x16.google.protobuf.Empty\x1a*.xelbot.com.autonotes.server.CarCollection\x12X\n" +
	"\rGetCurrencies\x12\x16.google.protobuf.Empty\x1a/.xelbot.com.autonotes.server.CurrencyCollection\x12Z\n" +
	"\x12GetDefaultCurrency\x12\x16.google.protobuf.Empty\x1a,.xelbot.com.autonotes.server.DefaultCurrency\x12T\n" +
	"\x0fGetUserSettings\x12\x16.google.protobuf.Empty\x1a).xelbot.com.autonotes.server.UserSettings\x12h\n" +
	"\x10SaveUserSettings\x12).xelbot.com.autonotes.server.UserSettings\x1a).xelbot.com.autonotes.server.UserSettings2\x82\x03\n" +
	"\x0eFuelRepository\x12`\n" +
	"\bGetFuels\x12'.xelbot.com.autonotes.server.FuelFilter\x1a+.xelbot.com.autonotes.server.FuelCollection\x12c\n" +
	"\x12GetFillingStations\x12\x16.google.protobuf.Empty\x1a5.xelbot.com.autonotes.server.FillingStationCollection\x12W\n" +
	"\fGetFuelTypes\x12\x16.google.protobuf.Empty\x1a/.xelbot.com.autonotes.server.FuelTypeCollection\x12P\n" +
	"\bSaveFuel\x12!.xelbot.com.autonotes.server.Fuel\x1a!.xelbot.com.autonotes.server.Fuel2\xec\x03\n" +
	"\x0fOrderRepository\x12c\n" +
	"\tGetOrders\x12(.xelbot.com.autonotes.server.OrderFilter\x1a,.xelbot.com.autonotes.server.OrderCollection\x12Y\n" +
	"\rGetOrderTypes\x12\x16.google.protobuf.Empty\x1a0.xelbot.com.autonotes.server.OrderTypeCollection\x12S\n" +
	"\tSaveOrder\x12\".xelbot.com.autonotes.server.Order\x1a\".xelbot.com.autonotes.server.Order\x12i\n" +
	"\vGetExpenses\x12*.xelbot.com.autonotes.server.ExpenseFilter\x1a..xelbot.com.autonotes.server.ExpenseCollection\x12Y\n" +
	"\vSaveExpense\x12$.xelbot.com.autonotes.server.Expense\x1a$.xelbot.com.autonotes.server.ExpenseBTZ'xelbot.com/auto-notes/server/rpc/server\xca\x02\x10AutoNotes\\Server\xe2\x02\x15AutoNotes\\Server\\Metab\x06proto3"

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData []byte
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_server_proto_rawDesc), len(file_server_proto_rawDesc)))
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_server_proto_goTypes = []any{
	(ExpenseType)(0),                 // 0: xelbot.com.autonotes.server.ExpenseType
	(*Cost)(nil),                     // 1: xelbot.com.autonotes.server.Cost
	(*Car)(nil),                      // 2: xelbot.com.autonotes.server.Car
	(*CarCollection)(nil),            // 3: xelbot.com.autonotes.server.CarCollection
	(*FillingStation)(nil),           // 4: xelbot.com.autonotes.server.FillingStation
	(*FillingStationCollection)(nil), // 5: xelbot.com.autonotes.server.FillingStationCollection
	(*FuelType)(nil),                 // 6: xelbot.com.autonotes.server.FuelType
	(*FuelTypeCollection)(nil),       // 7: xelbot.com.autonotes.server.FuelTypeCollection
	(*Fuel)(nil),                     // 8: xelbot.com.autonotes.server.Fuel
	(*FuelCollection)(nil),           // 9: xelbot.com.autonotes.server.FuelCollection
	(*Currency)(nil),                 // 10: xelbot.com.autonotes.server.Currency
	(*DefaultCurrency)(nil),          // 11: xelbot.com.autonotes.server.DefaultCurrency
	(*CurrencyCollection)(nil),       // 12: xelbot.com.autonotes.server.CurrencyCollection
	(*PaginationMeta)(nil),           // 13: xelbot.com.autonotes.server.PaginationMeta
	(*UserSettings)(nil),             // 14: xelbot.com.autonotes.server.UserSettings
	(*FuelFilter)(nil),               // 15: xelbot.com.autonotes.server.FuelFilter
	(*OrderType)(nil),                // 16: xelbot.com.autonotes.server.OrderType
	(*OrderTypeCollection)(nil),      // 17: xelbot.com.autonotes.server.OrderTypeCollection
	(*Order)(nil),                    // 18: xelbot.com.autonotes.server.Order
	(*OrderCollection)(nil),          // 19: xelbot.com.autonotes.server.OrderCollection
	(*Expense)(nil),                  // 20: xelbot.com.autonotes.server.Expense
	(*ExpenseCollection)(nil),        // 21: xelbot.com.autonotes.server.ExpenseCollection
	(*OrderFilter)(nil),              // 22: xelbot.com.autonotes.server.OrderFilter
	(*ExpenseFilter)(nil),            // 23: xelbot.com.autonotes.server.ExpenseFilter
	(*timestamppb.Timestamp)(nil),    // 24: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 25: google.protobuf.Empty
}
var file_server_proto_depIdxs = []int32{
	24, // 0: xelbot.com.autonotes.server.Car.created_at:type_name -> google.protobuf.Timestamp
	2,  // 1: xelbot.com.autonotes.server.CarCollection.cars:type_name -> xelbot.com.autonotes.server.Car
	24, // 2: xelbot.com.autonotes.server.FillingStation.created_at:type_name -> google.protobuf.Timestamp
	4,  // 3: xelbot.com.autonotes.server.FillingStationCollection.stations:type_name -> xelbot.com.autonotes.server.FillingStation
	6,  // 4: xelbot.com.autonotes.server.FuelTypeCollection.types:type_name -> xelbot.com.autonotes.server.FuelType
	1,  // 5: xelbot.com.autonotes.server.Fuel.cost:type_name -> xelbot.com.autonotes.server.Cost
	4,  // 6: xelbot.com.autonotes.server.Fuel.station:type_name -> xelbot.com.autonotes.server.FillingStation
	24, // 7: xelbot.com.autonotes.server.Fuel.date:type_name -> google.protobuf.Timestamp
	2,  // 8: xelbot.com.autonotes.server.Fuel.car:type_name -> xelbot.com.autonotes.server.Car
	24, // 9: xelbot.com.autonotes.server.Fuel.created_at:type_name -> google.protobuf.Timestamp
	6,  // 10: xelbot.com.autonotes.server.Fuel.type:type_name -> xelbot.com.autonotes.server.FuelType
	8,  // 11: xelbot.com.autonotes.server.FuelCollection.fuels:type_name -> xelbot.com.autonotes.server.Fuel
	13, // 12: xelbot.com.autonotes.server.FuelCollection.meta:type_name -> xelbot.com.autonotes.server.PaginationMeta
	24, // 13: xelbot.com.autonotes.server.Currency.created_at:type_name -> google.protobuf.Timestamp
	10, // 14: xelbot.com.autonotes.server.DefaultCurrency.currency:type_name -> xelbot.com.autonotes.server.Currency
	10, // 15: xelbot.com.autonotes.server.CurrencyCollection.currencies:type_name -> xelbot.com.autonotes.server.Currency
	2,  // 16: xelbot.com.autonotes.server.UserSettings.default_car:type_name -> xelbot.com.autonotes.server.Car
	10, // 17: xelbot.com.autonotes.server.UserSettings.default_currency:type_name -> xelbot.com.autonotes.server.Currency
	24, // 18: xelbot.com.autonotes.server.UserSettings.created_at:type_name -> google.protobuf.Timestamp
	24, // 19: xelbot.com.autonotes.server.UserSettings.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 20: xelbot.com.autonotes.server.UserSettings.default_fuel_type:type_name -> xelbot.com.autonotes.server.FuelType
	16, // 21: xelbot.com.autonotes.server.OrderTypeCollection.types:type_name -> xelbot.com.autonotes.server.OrderType
	1,  // 22: xelbot.com.autonotes.server.Order.cost:type_name -> xelbot.com.autonotes.server.Cost
	24, // 23: xelbot.com.autonotes.server.Order.date:type_name -> google.protobuf.Timestamp
	24, // 24: xelbot.com.autonotes.server.Order.used_at:type_name -> google.protobuf.Timestamp
	2,  // 25: xelbot.com.autonotes.server.Order.car:type_name -> xelbot.com.autonotes.server.Car
	16, // 26: xelbot.com.autonotes.server.Order.type:type_name -> xelbot.com.autonotes.server.OrderType
	24, // 27: xelbot.com.autonotes.server.Order.created_at:type_name -> google.protobuf.Timestamp
	18, // 28: xelbot.com.autonotes.server.OrderCollection.orders:type_name -> xelbot.com.autonotes.server.Order
	13, // 29: xelbot.com.autonotes.server.OrderCollection.meta:type_name -> xelbot.com.autonotes.server.PaginationMeta
	1,  // 30: xelbot.com.autonotes.server.Expense.cost:type_name -> xelbot.com.autonotes.server.Cost
	24, // 31: xelbot.com.autonotes.server.Expense.date:type_name -> google.protobuf.Timestamp
	2,  // 32: xelbot.com.autonotes.server.Expense.car:type_name -> xelbot.com.autonotes.server.Car
	0,  // 33: xelbot.com.autonotes.server.Expense.type:type_name -> xelbot.com.autonotes.server.ExpenseType
	20, // 34: xelbot.com.autonotes.server.ExpenseCollection.expenses:type_name -> xelbot.com.autonotes.server.Expense
	13, // 35: xelbot.com.autonotes.server.ExpenseCollection.meta:type_name -> xelbot.com.autonotes.server.PaginationMeta
	25, // 36: xelbot.com.autonotes.server.UserRepository.GetCars:input_type -> google.protobuf.Empty
	25, // 37: xelbot.com.autonotes.server.UserRepository.GetCurrencies:input_type -> google.protobuf.Empty
	25, // 38: xelbot.com.autonotes.server.UserRepository.GetDefaultCurrency:input_type -> google.protobuf.Empty
	25, // 39: xelbot.com.autonotes.server.UserRepository.GetUserSettings:input_type -> google.protobuf.Empty
	14, // 40: xelbot.com.autonotes.server.UserRepository.SaveUserSettings:input_type -> xelbot.com.autonotes.server.UserSettings
	15, // 41: xelbot.com.autonotes.server.FuelRepository.GetFuels:input_type -> xelbot.com.autonotes.server.FuelFilter
	25, // 42: xelbot.com.autonotes.server.FuelRepository.GetFillingStations:input_type -> google.protobuf.Empty
	25, // 43: xelbot.com.autonotes.server.FuelRepository.GetFuelTypes:input_type -> google.protobuf.Empty
	8,  // 44: xelbot.com.autonotes.server.FuelRepository.SaveFuel:input_type -> xelbot.com.autonotes.server.Fuel
	22, // 45: xelbot.com.autonotes.server.OrderRepository.GetOrders:input_type -> xelbot.com.autonotes.server.OrderFilter
	25, // 46: xelbot.com.autonotes.server.OrderRepository.GetOrderTypes:input_type -> google.protobuf.Empty
	18, // 47: xelbot.com.autonotes.server.OrderRepository.SaveOrder:input_type -> xelbot.com.autonotes.server.Order
	23, // 48: xelbot.com.autonotes.server.OrderRepository.GetExpenses:input_type -> xelbot.com.autonotes.server.ExpenseFilter
	20, // 49: xelbot.com.autonotes.server.OrderRepository.SaveExpense:input_type -> xelbot.com.autonotes.server.Expense
	3,  // 50: xelbot.com.autonotes.server.UserRepository.GetCars:output_type -> xelbot.com.autonotes.server.CarCollection
	12, // 51: xelbot.com.autonotes.server.UserRepository.GetCurrencies:output_type -> xelbot.com.autonotes.server.CurrencyCollection
	11, // 52: xelbot.com.autonotes.server.UserRepository.GetDefaultCurrency:output_type -> xelbot.com.autonotes.server.DefaultCurrency
	14, // 53: xelbot.com.autonotes.server.UserRepository.GetUserSettings:output_type -> xelbot.com.autonotes.server.UserSettings
	14, // 54: xelbot.com.autonotes.server.UserRepository.SaveUserSettings:output_type -> xelbot.com.autonotes.server.UserSettings
	9,  // 55: xelbot.com.autonotes.server.FuelRepository.GetFuels:output_type -> xelbot.com.autonotes.server.FuelCollection
	5,  // 56: xelbot.com.autonotes.server.FuelRepository.GetFillingStations:output_type -> xelbot.com.autonotes.server.FillingStationCollection
	7,  // 57: xelbot.com.autonotes.server.FuelRepository.GetFuelTypes:output_type -> xelbot.com.autonotes.server.FuelTypeCollection
	8,  // 58: xelbot.com.autonotes.server.FuelRepository.SaveFuel:output_type -> xelbot.com.autonotes.server.Fuel
	19, // 59: xelbot.com.autonotes.server.OrderRepository.GetOrders:output_type -> xelbot.com.autonotes.server.OrderCollection
	17, // 60: xelbot.com.autonotes.server.OrderRepository.GetOrderTypes:output_type -> xelbot.com.autonotes.server.OrderTypeCollection
	18, // 61: xelbot.com.autonotes.server.OrderRepository.SaveOrder:output_type -> xelbot.com.autonotes.server.Order
	21, // 62: xelbot.com.autonotes.server.OrderRepository.GetExpenses:output_type -> xelbot.com.autonotes.server.ExpenseCollection
	20, // 63: xelbot.com.autonotes.server.OrderRepository.SaveExpense:output_type -> xelbot.com.autonotes.server.Expense
	50, // [50:64] is the sub-list for method output_type
	36, // [36:50] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_server_proto_rawDesc), len(file_server_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}
